{"mappings":"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","sources":["<anon>","src/main.ts","node_modules/@tentjs/tent/dist/module.js","node_modules/@tentjs/tent/dist/src/main.ts"],"sourcesContent":["function $1522cb89a5b7fae6$export$186d02efde07ef98(el, component) {\n    const { state: state = {}, view: view, mounted: mounted } = component;\n    let node;\n    if (el == null) return;\n    const handler = {\n        get (obj, key) {\n            if (typeof obj[key] === \"object\" && obj[key] !== null) return new Proxy(obj[key], handler);\n            else return obj[key];\n        },\n        set (obj, prop, value) {\n            if (!obj.hasOwnProperty(prop)) throw new Error(`The property \"${String(prop)}\" does not exist on the state object.`);\n            if (obj[prop] === value) return true;\n            const s = Reflect.set(obj, prop, value);\n            $1522cb89a5b7fae6$var$$b013a5dd6d18443e$var$walker(node, view({\n                state: proxy\n            }));\n            return s;\n        }\n    };\n    const proxy = new Proxy({\n        ...state\n    }, handler);\n    node = view({\n        state: proxy\n    });\n    node.$tent = {\n        attributes: {},\n        isComponent: true\n    };\n    el.append(node);\n    mounted?.({\n        state: proxy\n    });\n}\nfunction $1522cb89a5b7fae6$export$ee84a198a55b65e5(context) {\n    const [tag, children, attributes] = context;\n    const elm = document.createElement(tag);\n    elm.$tent = {\n        attributes: {},\n        isComponent: false\n    };\n    if (Array.isArray(children)) children.forEach((c)=>elm.append(Array.isArray(c) ? $1522cb89a5b7fae6$export$ee84a198a55b65e5(c) : c));\n    else elm.append(typeof children === \"number\" ? children.toString() : children);\n    for(const key in attributes){\n        elm.$tent.attributes[key] = attributes[key];\n        if (key.startsWith(\"on\") || /[A-Z]/.test(key)) elm[key] = attributes[key];\n        else {\n            const val = attributes[key];\n            if (typeof val === \"boolean\") {\n                if (val) elm.setAttribute(key, \"\");\n                else elm.removeAttribute(key);\n            } else elm.setAttribute(key, attributes[key]);\n        }\n    }\n    return elm;\n}\nfunction $1522cb89a5b7fae6$var$$b013a5dd6d18443e$var$walker(oldNode, newNode) {\n    const nc = Array.from(newNode.children);\n    $1522cb89a5b7fae6$var$$b013a5dd6d18443e$var$syncNodes(oldNode, newNode);\n    if (oldNode.children.length < nc.length) nc.forEach((x, index)=>{\n        if (!oldNode.children[index]) oldNode.append($1522cb89a5b7fae6$var$$b013a5dd6d18443e$var$addAttributes(x.cloneNode(true), x));\n    });\n    Array.from(oldNode.children).forEach((oChild, index)=>{\n        const nChild = nc[index];\n        if (nChild?.$tent?.isComponent || oChild?.$tent?.isComponent) return;\n        if (!nChild) {\n            oChild.remove();\n            return;\n        }\n        if (oChild.tagName !== nChild.tagName) oChild.replaceWith(nChild);\n        // Add children that are not present in the old node\n        if (oChild.children.length < nChild.children.length) {\n            const occ = Array.from(oChild.children);\n            Array.from(nChild.children).forEach((ncc, index)=>{\n                if (!occ[index]) oChild.append($1522cb89a5b7fae6$var$$b013a5dd6d18443e$var$addAttributes(ncc.cloneNode(true), ncc));\n            });\n        }\n        // Remove children that are not present in the new node\n        if (oChild.children.length > nChild.children.length) {\n            const ncc = Array.from(nChild.children);\n            Array.from(oChild.children).forEach((x, index)=>{\n                if (!ncc[index]) x.remove();\n            });\n        }\n        $1522cb89a5b7fae6$var$$b013a5dd6d18443e$var$syncNodes(oChild, nChild);\n        $1522cb89a5b7fae6$var$$b013a5dd6d18443e$var$walker(oChild, nChild);\n    });\n}\nfunction $1522cb89a5b7fae6$var$$b013a5dd6d18443e$var$syncNodes(oldNode, newNode) {\n    // Add attributes that are not present in the old node\n    Array.from(newNode.attributes).forEach((attr)=>{\n        if (oldNode.getAttribute(attr.name) !== attr.value) oldNode.setAttribute(attr.name, attr.value);\n    });\n    // Remove attributes that are not present in the new node\n    Array.from(oldNode.attributes).forEach((attr)=>{\n        if (!newNode.hasAttribute(attr.name)) oldNode.removeAttribute(attr.name);\n    });\n    // Replace text content if it's different and the element has no children\n    if (oldNode.textContent !== newNode.textContent && newNode.children.length === 0 && oldNode.children.length === 0) oldNode.textContent = newNode.textContent;\n}\nfunction $1522cb89a5b7fae6$var$$b013a5dd6d18443e$var$addAttributes(clone, node) {\n    if (!clone.$tent && !node.$tent) return clone;\n    Object.keys(node.$tent.attributes).forEach((key)=>clone[key] = node.$tent.attributes[key]);\n    if (clone.hasChildNodes()) for (const [index, entry] of clone.childNodes.entries())$1522cb89a5b7fae6$var$$b013a5dd6d18443e$var$addAttributes(entry, node.childNodes[index]);\n    return clone;\n}\nconst $1522cb89a5b7fae6$var$$b013a5dd6d18443e$var$t = [\n    \"div\",\n    \"p\",\n    \"ul\",\n    \"li\",\n    \"button\",\n    \"input\",\n    \"label\",\n    \"form\",\n    \"span\",\n    \"h1\",\n    \"h2\",\n    \"h3\",\n    \"h4\",\n    \"h5\",\n    \"h6\",\n    \"a\",\n    \"img\",\n    \"video\",\n    \"audio\",\n    \"canvas\",\n    \"table\",\n    \"tr\",\n    \"td\",\n    \"th\",\n    \"thead\",\n    \"tbody\",\n    \"tfoot\",\n    \"select\",\n    \"option\",\n    \"textarea\",\n    \"pre\",\n    \"code\",\n    \"blockquote\",\n    \"hr\",\n    \"br\",\n    \"iframe\",\n    \"nav\",\n    \"header\",\n    \"footer\",\n    \"main\",\n    \"section\",\n    \"article\",\n    \"aside\",\n    \"small\",\n    \"b\"\n];\nconst $1522cb89a5b7fae6$export$8b7a896ae75accbf = {};\n$1522cb89a5b7fae6$var$$b013a5dd6d18443e$var$t.forEach((tag)=>$1522cb89a5b7fae6$export$8b7a896ae75accbf[tag] = (children, attrs)=>$1522cb89a5b7fae6$export$ee84a198a55b65e5([\n            tag,\n            children,\n            attrs\n        ]));\n\n\nconst { div: $ad2bcec7a0192558$var$div, button: $ad2bcec7a0192558$var$button } = (0, $1522cb89a5b7fae6$export$8b7a896ae75accbf);\nconst $ad2bcec7a0192558$var$Counter = {\n    state: {\n        count: 0\n    },\n    view: ({ state: state })=>$ad2bcec7a0192558$var$div([\n            $ad2bcec7a0192558$var$button(\"+\", {\n                onclick: ()=>state.count++\n            }),\n            $ad2bcec7a0192558$var$div(state.count),\n            $ad2bcec7a0192558$var$button(\"-\", {\n                onclick: ()=>state.count--\n            })\n        ])\n};\n(0, $1522cb89a5b7fae6$export$186d02efde07ef98)(document.getElementById(\"counter\"), $ad2bcec7a0192558$var$Counter);\nconst $ad2bcec7a0192558$var$GetStarted = {\n    view: ()=>$ad2bcec7a0192558$var$button(\"Get Started\", {\n            onclick: $ad2bcec7a0192558$var$onclick,\n            class: \"cta\"\n        })\n};\nfunction $ad2bcec7a0192558$var$onclick() {\n    window.location.href = \"https://github.com/tentjs/tent\";\n}\n(0, $1522cb89a5b7fae6$export$186d02efde07ef98)(document.getElementById(\"get-started\"), $ad2bcec7a0192558$var$GetStarted);\n\n\n//# sourceMappingURL=index.b27adcd3.js.map\n","import {type Component, mount, tags} from '@tentjs/tent'\n\nconst {div, button} = tags\n\ntype State = {\n  count: number\n}\n\nconst Counter: Component<State> = {\n  state: {count: 0},\n  view: ({state}) => div([\n    button('+', {onclick: () => state.count++}),\n    div(state.count),\n    button('-', {onclick: () => state.count--}),\n  ])\n}\n\nmount(document.getElementById('counter'), Counter)\n\nconst GetStarted = {\n  view: () => button(\n    'Get Started',\n    {onclick, class: 'cta'},\n  ),\n}\n\nfunction onclick() {\n  window.location.href = 'https://github.com/tentjs/tent';\n}\n\nmount(\n  document.getElementById('get-started'),\n  GetStarted,\n)\n\n","function $b013a5dd6d18443e$export$186d02efde07ef98(el, component) {\n    const { state: state = {}, view: view, mounted: mounted } = component;\n    let node;\n    if (el == null) return;\n    const handler = {\n        get (obj, key) {\n            if (typeof obj[key] === \"object\" && obj[key] !== null) return new Proxy(obj[key], handler);\n            else return obj[key];\n        },\n        set (obj, prop, value) {\n            if (!obj.hasOwnProperty(prop)) throw new Error(`The property \"${String(prop)}\" does not exist on the state object.`);\n            if (obj[prop] === value) return true;\n            const s = Reflect.set(obj, prop, value);\n            $b013a5dd6d18443e$var$walker(node, view({\n                state: proxy\n            }));\n            return s;\n        }\n    };\n    const proxy = new Proxy({\n        ...state\n    }, handler);\n    node = view({\n        state: proxy\n    });\n    node.$tent = {\n        attributes: {},\n        isComponent: true\n    };\n    el.append(node);\n    mounted?.({\n        state: proxy\n    });\n}\nfunction $b013a5dd6d18443e$export$ee84a198a55b65e5(context) {\n    const [tag, children, attributes] = context;\n    const elm = document.createElement(tag);\n    elm.$tent = {\n        attributes: {},\n        isComponent: false\n    };\n    if (Array.isArray(children)) children.forEach((c)=>elm.append(Array.isArray(c) ? $b013a5dd6d18443e$export$ee84a198a55b65e5(c) : c));\n    else elm.append(typeof children === \"number\" ? children.toString() : children);\n    for(const key in attributes){\n        elm.$tent.attributes[key] = attributes[key];\n        if (key.startsWith(\"on\") || /[A-Z]/.test(key)) elm[key] = attributes[key];\n        else {\n            const val = attributes[key];\n            if (typeof val === \"boolean\") {\n                if (val) elm.setAttribute(key, \"\");\n                else elm.removeAttribute(key);\n            } else elm.setAttribute(key, attributes[key]);\n        }\n    }\n    return elm;\n}\nfunction $b013a5dd6d18443e$var$walker(oldNode, newNode) {\n    const nc = Array.from(newNode.children);\n    $b013a5dd6d18443e$var$syncNodes(oldNode, newNode);\n    if (oldNode.children.length < nc.length) nc.forEach((x, index)=>{\n        if (!oldNode.children[index]) oldNode.append($b013a5dd6d18443e$var$addAttributes(x.cloneNode(true), x));\n    });\n    Array.from(oldNode.children).forEach((oChild, index)=>{\n        const nChild = nc[index];\n        if (nChild?.$tent?.isComponent || oChild?.$tent?.isComponent) return;\n        if (!nChild) {\n            oChild.remove();\n            return;\n        }\n        if (oChild.tagName !== nChild.tagName) oChild.replaceWith(nChild);\n        // Add children that are not present in the old node\n        if (oChild.children.length < nChild.children.length) {\n            const occ = Array.from(oChild.children);\n            Array.from(nChild.children).forEach((ncc, index)=>{\n                if (!occ[index]) oChild.append($b013a5dd6d18443e$var$addAttributes(ncc.cloneNode(true), ncc));\n            });\n        }\n        // Remove children that are not present in the new node\n        if (oChild.children.length > nChild.children.length) {\n            const ncc = Array.from(nChild.children);\n            Array.from(oChild.children).forEach((x, index)=>{\n                if (!ncc[index]) x.remove();\n            });\n        }\n        $b013a5dd6d18443e$var$syncNodes(oChild, nChild);\n        $b013a5dd6d18443e$var$walker(oChild, nChild);\n    });\n}\nfunction $b013a5dd6d18443e$var$syncNodes(oldNode, newNode) {\n    // Add attributes that are not present in the old node\n    Array.from(newNode.attributes).forEach((attr)=>{\n        if (oldNode.getAttribute(attr.name) !== attr.value) oldNode.setAttribute(attr.name, attr.value);\n    });\n    // Remove attributes that are not present in the new node\n    Array.from(oldNode.attributes).forEach((attr)=>{\n        if (!newNode.hasAttribute(attr.name)) oldNode.removeAttribute(attr.name);\n    });\n    // Replace text content if it's different and the element has no children\n    if (oldNode.textContent !== newNode.textContent && newNode.children.length === 0 && oldNode.children.length === 0) oldNode.textContent = newNode.textContent;\n}\nfunction $b013a5dd6d18443e$var$addAttributes(clone, node) {\n    if (!clone.$tent && !node.$tent) return clone;\n    Object.keys(node.$tent.attributes).forEach((key)=>clone[key] = node.$tent.attributes[key]);\n    if (clone.hasChildNodes()) for (const [index, entry] of clone.childNodes.entries())$b013a5dd6d18443e$var$addAttributes(entry, node.childNodes[index]);\n    return clone;\n}\nconst $b013a5dd6d18443e$var$t = [\n    \"div\",\n    \"p\",\n    \"ul\",\n    \"li\",\n    \"button\",\n    \"input\",\n    \"label\",\n    \"form\",\n    \"span\",\n    \"h1\",\n    \"h2\",\n    \"h3\",\n    \"h4\",\n    \"h5\",\n    \"h6\",\n    \"a\",\n    \"img\",\n    \"video\",\n    \"audio\",\n    \"canvas\",\n    \"table\",\n    \"tr\",\n    \"td\",\n    \"th\",\n    \"thead\",\n    \"tbody\",\n    \"tfoot\",\n    \"select\",\n    \"option\",\n    \"textarea\",\n    \"pre\",\n    \"code\",\n    \"blockquote\",\n    \"hr\",\n    \"br\",\n    \"iframe\",\n    \"nav\",\n    \"header\",\n    \"footer\",\n    \"main\",\n    \"section\",\n    \"article\",\n    \"aside\",\n    \"small\",\n    \"b\"\n];\nconst $b013a5dd6d18443e$export$8b7a896ae75accbf = {};\n$b013a5dd6d18443e$var$t.forEach((tag)=>$b013a5dd6d18443e$export$8b7a896ae75accbf[tag] = (children, attrs)=>$b013a5dd6d18443e$export$ee84a198a55b65e5([\n            tag,\n            children,\n            attrs\n        ]));\n\n\nexport {$b013a5dd6d18443e$export$186d02efde07ef98 as mount, $b013a5dd6d18443e$export$ee84a198a55b65e5 as createTag, $b013a5dd6d18443e$export$8b7a896ae75accbf as tags};\n//# sourceMappingURL=module.js.map\n","type Component<S> = {\n  view: (context: {state: S}) => CustomNode;\n  state?: S;\n  mounted?: (context: {state: S}) => void;\n};\n\ntype CustomNode = Node & Element & HTMLElement & {\n  $tent: {\n    attributes: object;\n    isComponent: boolean;\n  };\n  children: CustomNode[];\n};\n\nfunction mount<S extends object>(el: HTMLElement | null, component: Component<S>) {\n  const {state = {} as S, view, mounted} = component;\n  let node: CustomNode;\n\n  if (el == null) {\n    return;\n  }\n\n  const handler = {\n    get(obj: S, key: string) {\n      if (typeof obj[key] === 'object' && obj[key] !== null) {\n        return new Proxy(obj[key], handler);\n      } else {\n        return obj[key];\n      }\n    },\n    set(obj: S, prop: string, value: unknown) {\n      if (!obj.hasOwnProperty(prop)) {\n        throw new Error(\n          `The property \"${String(prop)\n          }\" does not exist on the state object.`,\n        );\n      }\n      if (obj[prop] === value) return true;\n\n      const s = Reflect.set(obj, prop, value);\n\n      walker(\n        node,\n        view({state: proxy}),\n      );\n\n      return s;\n    },\n  }\n\n  const proxy = new Proxy<S>(\n    {...state},\n    handler,\n  );\n\n  node = view({state: proxy});\n  node.$tent = {\n    attributes: {},\n    isComponent: true,\n  };\n\n  el.append(node);\n\n  mounted?.({state: proxy});\n}\n\ntype Children = string | number | (Node | Context)[]\ntype Context = [string, Children, object | undefined];\n\nfunction createTag(context: Context) {\n  const [tag, children, attributes] = context;\n  const elm = document.createElement(tag) as CustomNode;\n\n  elm.$tent = {\n    attributes: {},\n    isComponent: false,\n  };\n\n  if (Array.isArray(children)) {\n    children.forEach(\n      (c) =>\n        elm.append(\n          Array.isArray(c) ? createTag(c) : c,\n        ),\n    );\n  } else {\n    elm.append(typeof children === 'number' ? children.toString() : children);\n  }\n\n  for (const key in attributes) {\n    elm.$tent.attributes[key] = attributes[key];\n\n    if (key.startsWith(\"on\") || /[A-Z]/.test(key)) {\n      elm[key] = attributes[key];\n    } else {\n      const val = attributes[key];\n      if (typeof val === 'boolean') {\n        if (val) {\n          elm.setAttribute(key, '');\n        } else {\n          elm.removeAttribute(key);\n        }\n      } else {\n        elm.setAttribute(key, attributes[key]);\n      }\n    }\n  }\n\n  return elm;\n}\n\nfunction walker(oldNode: CustomNode, newNode: CustomNode) {\n  const nc = Array.from<CustomNode>(newNode.children);\n\n  syncNodes(oldNode, newNode);\n\n  if (oldNode.children.length < nc.length) {\n    nc.forEach((x, index) => {\n      if (!oldNode.children[index]) {\n        oldNode.append(\n          addAttributes(x.cloneNode(true) as CustomNode, x)\n        );\n      }\n    });\n  }\n\n  Array.from<CustomNode>(oldNode.children).forEach((oChild, index) => {\n    const nChild = nc[index];\n\n    if (nChild?.$tent?.isComponent || oChild?.$tent?.isComponent) {\n      return;\n    }\n\n    if (!nChild) {\n      oChild.remove();\n      return;\n    }\n\n    if (oChild.tagName !== nChild.tagName) {\n      oChild.replaceWith(nChild);\n    }\n\n    // Add children that are not present in the old node\n    if (oChild.children.length < nChild.children.length) {\n      const occ = Array.from(oChild.children);\n\n      Array.from<CustomNode>(nChild.children).forEach((ncc, index) => {\n        if (!occ[index]) {\n          oChild.append(\n            addAttributes(ncc.cloneNode(true) as CustomNode, ncc)\n          );\n        }\n      });\n    }\n\n    // Remove children that are not present in the new node\n    if (oChild.children.length > nChild.children.length) {\n      const ncc = Array.from(nChild.children);\n\n      Array.from(oChild.children).forEach((x, index) => {\n        if (!ncc[index]) {\n          x.remove();\n        }\n      });\n    }\n\n    syncNodes(oChild, nChild);\n\n    walker(oChild, nChild);\n  });\n}\n\nfunction syncNodes(oldNode: CustomNode, newNode: CustomNode) {\n  // Add attributes that are not present in the old node\n  Array.from(newNode.attributes).forEach((attr) => {\n    if (oldNode.getAttribute(attr.name) !== attr.value) {\n      oldNode.setAttribute(attr.name, attr.value);\n    }\n  });\n  // Remove attributes that are not present in the new node\n  Array.from(oldNode.attributes).forEach((attr) => {\n    if (!newNode.hasAttribute(attr.name)) {\n      oldNode.removeAttribute(attr.name);\n    }\n  });\n\n  // Replace text content if it's different and the element has no children\n  if (\n    oldNode.textContent !== newNode.textContent &&\n    newNode.children.length === 0 &&\n    oldNode.children.length === 0\n  ) {\n    oldNode.textContent = newNode.textContent;\n  }\n}\n\nfunction addAttributes(clone: CustomNode, node: CustomNode) {\n  if (!clone.$tent && !node.$tent) return clone;\n\n  Object.keys(node.$tent.attributes).forEach(\n    (key) => clone[key] = node.$tent.attributes[key],\n  );\n\n  if (clone.hasChildNodes()) {\n    for (const [index, entry] of clone.childNodes.entries()) {\n      addAttributes(entry as CustomNode, node.childNodes[index] as CustomNode);\n    }\n  }\n\n  return clone;\n}\n\nconst t = [\n  \"div\",\n  \"p\",\n  \"ul\",\n  \"li\",\n  \"button\",\n  \"input\",\n  \"label\",\n  \"form\",\n  \"span\",\n  \"h1\",\n  \"h2\",\n  \"h3\",\n  \"h4\",\n  \"h5\",\n  \"h6\",\n  \"a\",\n  \"img\",\n  \"video\",\n  \"audio\",\n  \"canvas\",\n  \"table\",\n  \"tr\",\n  \"td\",\n  \"th\",\n  \"thead\",\n  \"tbody\",\n  \"tfoot\",\n  \"select\",\n  \"option\",\n  \"textarea\",\n  \"pre\",\n  \"code\",\n  \"blockquote\",\n  \"hr\",\n  \"br\",\n  \"iframe\",\n  \"nav\",\n  \"header\",\n  \"footer\",\n  \"main\",\n  \"section\",\n  \"article\",\n  \"aside\",\n  \"small\",\n  \"b\",\n];\nconst tags: Record<string, (children: Children, attrs?: object) => CustomNode> = {};\nt.forEach(\n  (tag) =>\n    tags[tag] = (children, attrs) =>\n      createTag([tag, children, attrs]),\n);\n\nexport {\n  mount,\n  tags,\n  createTag,\n  type Component,\n  type Children,\n  type Context,\n};\n"],"names":["$1522cb89a5b7fae6$export$186d02efde07ef98","el","component","node","state","view","mounted","handler","get","obj","key","Proxy","set","prop","value","hasOwnProperty","Error","String","s","Reflect","$1522cb89a5b7fae6$var$$b013a5dd6d18443e$var$walker","oldNode","newNode","nc","Array","from","children","$1522cb89a5b7fae6$var$$b013a5dd6d18443e$var$syncNodes","length","forEach","x","index","append","$1522cb89a5b7fae6$var$$b013a5dd6d18443e$var$addAttributes","cloneNode","oChild","nChild","$tent","isComponent","remove","tagName","replaceWith","occ","ncc","proxy","attributes","attr","getAttribute","name","setAttribute","hasAttribute","removeAttribute","textContent","clone","Object","keys","hasChildNodes","entry","childNodes","entries","$1522cb89a5b7fae6$export$8b7a896ae75accbf","$1522cb89a5b7fae6$var$$b013a5dd6d18443e$var$t","tag","attrs","$1522cb89a5b7fae6$export$ee84a198a55b65e5","context","elm","document","createElement","isArray","c","toString","startsWith","test","val","div","$ad2bcec7a0192558$var$div","button","$ad2bcec7a0192558$var$button","$ad2bcec7a0192558$var$onclick","window","location","href","getElementById","count","onclick","class"],"version":3,"file":"index.b27adcd3.js.map"}